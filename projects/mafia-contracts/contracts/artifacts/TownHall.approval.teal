#pragma version 10
intcblock 1 0 96 6
bytecblock 0x 0x0000000000000000 0x151f7c75 0x706c61796572734a6f696e6564 0x67616d655374617465 0x706c6179657231416c676f41646472 0x706c6179657232416c676f41646472 0x706c6179657233416c676f41646472 0x706c6179657234416c676f41646472 0x706c6179657235416c676f41646472 0x706c6179657236416c676f41646472 0x00 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/TownHall.algo.ts:83
	// this.player1AlgoAddr.value = globals.zeroAddress
	bytec 5 //  "player1AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:84
	// this.player2AlgoAddr.value = globals.zeroAddress
	bytec 6 //  "player2AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:85
	// this.player3AlgoAddr.value = globals.zeroAddress
	bytec 7 //  "player3AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:86
	// this.player4AlgoAddr.value = globals.zeroAddress
	bytec 8 //  "player4AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:87
	// this.player5AlgoAddr.value = globals.zeroAddress
	bytec 9 //  "player5AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:88
	// this.player6AlgoAddr.value = globals.zeroAddress
	bytec 10 //  "player6AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:90
	// this.maffia.value = globals.zeroAddress
	pushbytes 0x6d6166666961 // "maffia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:91
	// this.doctor.value = globals.zeroAddress
	pushbytes 0x646f63746f72 // "doctor"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:92
	// this.farmer.value = globals.zeroAddress
	pushbytes 0x6661726d6572 // "farmer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:93
	// this.butcher.value = globals.zeroAddress
	pushbytes 0x62757463686572 // "butcher"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:94
	// this.innkeep.value = globals.zeroAddress
	pushbytes 0x696e6e6b656570 // "innkeep"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:95
	// this.grocer.value = globals.zeroAddress
	pushbytes 0x67726f636572 // "grocer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:97
	// this.playersJoined.value = 0
	bytec 3 //  "playersJoined"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:105
	// this.gameState.value = 0
	bytec 4 //  "gameState"
	intc 1 // 0
	app_global_put
	retsub

// dummyOpUp(uint64)uint64
*abi_route_dummyOpUp:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute dummyOpUp(uint64)uint64
	callsub dummyOpUp
	itob
	concat
	log
	intc 0 // 1
	return

// dummyOpUp(i: uint64): uint64
//
// Dummy Op Up
// Dummy operation to get more opcode budget
// @i - The number to return, necssary to deduplicate the name
// @returns the number (but we do nothing with it)
dummyOpUp:
	proto 1 1

	// contracts/TownHall.algo.ts:125
	// return i;
	frame_dig -1 // i: uint64
	retsub

// testt(byte[],byte[],byte[],byte[],byte[])byte[]
*abi_route_testt:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// c: byte[]
	txna ApplicationArgs 5
	extract 2 0

	// nonce: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// keyImage: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// pk: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// msg: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute testt(byte[],byte[],byte[],byte[],byte[])byte[]
	callsub testt
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// testt(msg: bytes, pk: bytes, keyImage: bytes, nonce: bytes, c: bytes): bytes
//
// TEST
testt:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/TownHall.algo.ts:137
	// left = ecAdd(
	//       'BLS12_381g1',
	//       ecScalarMul('BLS12_381g1', hex(BLS12381G1_BASEPOINT_BYTES), nonce),
	//       ecScalarMul('BLS12_381g1', pk, c)
	//     )
	pushbytes 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	frame_dig -4 // nonce: bytes
	ec_scalar_mul BLS12_381g1
	frame_dig -2 // pk: bytes
	frame_dig -5 // c: bytes
	ec_scalar_mul BLS12_381g1
	ec_add BLS12_381g1
	frame_bury 0 // left: byte[]

	// contracts/TownHall.algo.ts:145
	// hash = keccak256(pk)
	frame_dig -2 // pk: bytes
	keccak256
	frame_bury 1 // hash: byte[32]

	// contracts/TownHall.algo.ts:146
	// fpElement = btobigint(hash) % btobigint(hex(BLS12381_FIELD_MODULUS_HEX))
	frame_dig 1 // hash: byte[32]
	bytec 12 // 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab
	b%
	frame_bury 2 // fpElement: bigint

	// contracts/TownHall.algo.ts:149
	// hp2p = ecMapTo('BLS12_381g1', rawBytes(fpElement))
	frame_dig 2 // fpElement: bigint
	ec_map_to BLS12_381g1
	frame_bury 3 // hp2p: byte[]

	// contracts/TownHall.algo.ts:155
	// right = ecAdd(
	//       'BLS12_381g1',
	//       ecScalarMul('BLS12_381g1', hp2p, nonce),
	//       ecScalarMul('BLS12_381g1', keyImage, c)
	//     )
	frame_dig 3 // hp2p: byte[]
	frame_dig -4 // nonce: bytes
	ec_scalar_mul BLS12_381g1
	frame_dig -3 // keyImage: bytes
	frame_dig -5 // c: bytes
	ec_scalar_mul BLS12_381g1
	ec_add BLS12_381g1
	frame_bury 4 // right: byte[]

	// contracts/TownHall.algo.ts:165
	// h = rawBytes(
	//       btobigint(keccak256(concat(concat(msg, left), right))) % btobigint(hex(BLS12381_CURVE_ORDER_HEX))
	//     )
	frame_dig -1 // msg: bytes
	frame_dig 0 // left: byte[]
	concat
	frame_dig 4 // right: byte[]
	concat
	keccak256
	bytec 13 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
	b%
	frame_bury 5 // h: byte[]

	// contracts/TownHall.algo.ts:169
	// return h;
	frame_dig 5 // h: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// dlog(byte[],byte[],byte[],byte[])bool
*abi_route_dlog:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// z: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// v: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// x: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// g: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dlog(byte[],byte[],byte[],byte[])bool
	callsub dlog
	bytec 11 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// dlog(g: bytes, x: bytes, v: bytes, z: bytes): boolean
dlog:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/TownHall.algo.ts:200
	// hash = keccak256(concat(g, concat(x, v)))
	frame_dig -1 // g: bytes
	frame_dig -2 // x: bytes
	frame_dig -3 // v: bytes
	concat
	concat
	keccak256
	frame_bury 0 // hash: byte[32]

	// contracts/TownHall.algo.ts:201
	// challenge = btobigint(hash) % btobigint(hex(BLS12381_CURVE_ORDER_HEX))
	frame_dig 0 // hash: byte[32]
	bytec 13 // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
	b%
	frame_bury 1 // challenge: bigint

	// contracts/TownHall.algo.ts:203
	// return (
	//       v === ecAdd('BLS12_381g1', ecScalarMul('BLS12_381g1', g, z), ecScalarMul('BLS12_381g1', x, rawBytes(challenge)))
	//     );
	frame_dig -3 // v: bytes
	frame_dig -1 // g: bytes
	frame_dig -4 // z: bytes
	ec_scalar_mul BLS12_381g1
	frame_dig -2 // x: bytes
	frame_dig 1 // challenge: bigint
	ec_scalar_mul BLS12_381g1
	ec_add BLS12_381g1
	==

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// hashPointToPoint(byte[])byte[]
*abi_route_hashPointToPoint:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// point: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute hashPointToPoint(byte[])byte[]
	callsub hashPointToPoint
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// hashPointToPoint(point: bytes): bytes
hashPointToPoint:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/TownHall.algo.ts:209
	// hash = keccak256(point)
	frame_dig -1 // point: bytes
	keccak256
	frame_bury 0 // hash: byte[32]

	// contracts/TownHall.algo.ts:210
	// fpElement = btobigint(hash) % btobigint(hex(BLS12381_FIELD_MODULUS_HEX))
	frame_dig 0 // hash: byte[32]
	bytec 12 // 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab
	b%
	frame_bury 1 // fpElement: bigint

	// contracts/TownHall.algo.ts:213
	// result = ecMapTo('BLS12_381g1', rawBytes(fpElement))
	frame_dig 1 // fpElement: bigint
	ec_map_to BLS12_381g1
	frame_bury 2 // result: byte[]

	// contracts/TownHall.algo.ts:214
	// return result;
	frame_dig 2 // result: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getGameState()uint64
*abi_route_getGameState:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getGameState()uint64
	callsub getGameState
	itob
	concat
	log
	intc 0 // 1
	return

// getGameState(): uint64
getGameState:
	proto 0 1

	// contracts/TownHall.algo.ts:220
	// return this.gameState.value;
	bytec 4 //  "gameState"
	app_global_get
	retsub

// joinGameLobby(byte[])bool
*abi_route_joinGameLobby:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// NIZK_DLOG: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute joinGameLobby(byte[])bool
	callsub joinGameLobby
	bytec 11 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// joinGameLobby(NIZK_DLOG: bytes): boolean
joinGameLobby:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// *if0_condition
	// contracts/TownHall.algo.ts:224
	// this.gameState.value !== 0
	bytec 4 //  "gameState"
	app_global_get
	intc 1 // 0
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/TownHall.algo.ts:225
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if0_end:
	// *if1_condition
	// contracts/TownHall.algo.ts:228
	// this.playersJoined.value === 6
	bytec 3 //  "playersJoined"
	app_global_get
	intc 3 // 6
	==
	bz *if1_end

	// *if1_consequent
	// contracts/TownHall.algo.ts:229
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if1_end:
	// contracts/TownHall.algo.ts:232
	// g = extract3(NIZK_DLOG, 0, BLS12381G1_LENGTH)
	frame_dig -1 // NIZK_DLOG: bytes
	extract 0 96
	frame_bury 0 // g: byte[]

	// contracts/TownHall.algo.ts:233
	// RingPK = extract3(NIZK_DLOG, BLS12381G1_LENGTH, BLS12381G1_LENGTH)
	frame_dig -1 // NIZK_DLOG: bytes
	extract 96 96
	frame_bury 1 // RingPK: byte[]

	// contracts/TownHall.algo.ts:234
	// v = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 2, BLS12381G1_LENGTH)
	frame_dig -1 // NIZK_DLOG: bytes
	extract 192 96
	frame_bury 2 // v: byte[]

	// contracts/TownHall.algo.ts:235
	// z = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 3, 32)
	frame_dig -1 // NIZK_DLOG: bytes
	pushint 288
	pushint 32
	extract3
	frame_bury 3 // z: byte[]

	// *if2_condition
	// contracts/TownHall.algo.ts:240
	// !this.dlog(g, RingPK, v, z)
	frame_dig 3 // z: byte[]
	frame_dig 2 // v: byte[]
	frame_dig 1 // RingPK: byte[]
	frame_dig 0 // g: byte[]
	callsub dlog
	!
	bz *if2_end

	// *if2_consequent
	// contracts/TownHall.algo.ts:241
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if2_end:
	// *if3_condition
	// contracts/TownHall.algo.ts:244
	// !this.quickAccessPKBoxes(0).exists
	bytec 1 // 0x0000000000000000
	box_len
	swap
	pop
	!
	bz *if3_else

	// *if3_consequent
	// contracts/TownHall.algo.ts:245
	// this.quickAccessPKBoxes(0).create(BLS12381G1_LENGTH)
	bytec 1 // 0x0000000000000000
	intc 2 // 96
	box_create
	pop
	b *if3_end

*if3_else:
	// contracts/TownHall.algo.ts:247
	// this.quickAccessPKBoxes(0).resize(this.quickAccessPKBoxes(0).size + BLS12381G1_LENGTH)
	bytec 1 // 0x0000000000000000
	dup
	box_len

	// box value does not exist: this.quickAccessPKBoxes(0).size
	assert
	intc 2 // 96
	+
	box_resize

*if3_end:
	// *if4_condition
	// contracts/TownHall.algo.ts:251
	// !this.quickAccessPKBoxes(0).exists
	bytec 1 // 0x0000000000000000
	box_len
	swap
	pop
	!
	bz *if4_end

	// *if4_consequent
	// contracts/TownHall.algo.ts:252
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if4_end:
	// contracts/TownHall.algo.ts:255
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 1 // 0x0000000000000000
	bytec 3 //  "playersJoined"
	app_global_get
	intc 2 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:256
	// this.playersJoined.value += 1
	bytec 3 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 3 //  "playersJoined"
	swap
	app_global_put

	// *if5_condition
	// contracts/TownHall.algo.ts:258
	// this.player1AlgoAddr.value === globals.zeroAddress
	bytec 5 //  "player1AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if5_end

	// *if5_consequent
	// contracts/TownHall.algo.ts:259
	// this.player1AlgoAddr.value = this.txn.sender
	bytec 5 //  "player1AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:260
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if5_end:
	// *if6_condition
	// contracts/TownHall.algo.ts:262
	// this.player2AlgoAddr.value === globals.zeroAddress
	bytec 6 //  "player2AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if6_end

	// *if6_consequent
	// contracts/TownHall.algo.ts:263
	// this.player2AlgoAddr.value = this.txn.sender
	bytec 6 //  "player2AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:264
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if6_end:
	// *if7_condition
	// contracts/TownHall.algo.ts:266
	// this.player3AlgoAddr.value === globals.zeroAddress
	bytec 7 //  "player3AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if7_end

	// *if7_consequent
	// contracts/TownHall.algo.ts:267
	// this.player3AlgoAddr.value = this.txn.sender
	bytec 7 //  "player3AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:268
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if7_end:
	// *if8_condition
	// contracts/TownHall.algo.ts:270
	// this.player4AlgoAddr.value === globals.zeroAddress
	bytec 8 //  "player4AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if8_end

	// *if8_consequent
	// contracts/TownHall.algo.ts:271
	// this.player4AlgoAddr.value = this.txn.sender
	bytec 8 //  "player4AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:272
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if8_end:
	// *if9_condition
	// contracts/TownHall.algo.ts:274
	// this.player5AlgoAddr.value === globals.zeroAddress
	bytec 9 //  "player5AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if9_end

	// *if9_consequent
	// contracts/TownHall.algo.ts:275
	// this.player5AlgoAddr.value = this.txn.sender
	bytec 9 //  "player5AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:276
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if9_end:
	// *if10_condition
	// contracts/TownHall.algo.ts:278
	// this.player6AlgoAddr.value === globals.zeroAddress
	bytec 10 //  "player6AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if10_end

	// *if10_consequent
	// contracts/TownHall.algo.ts:279
	// this.player6AlgoAddr.value = this.txn.sender
	bytec 10 //  "player6AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:280
	// this.gameState.value = 1
	bytec 4 //  "gameState"
	intc 0 // 1
	app_global_put

	// contracts/TownHall.algo.ts:281
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if10_end:
	// contracts/TownHall.algo.ts:284
	// return false;
	intc 1 // 0

*joinGameLobby*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// assignRole(byte[],byte[],byte[],byte[],byte[],pay)bool
*abi_route_assignRole:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// lsigTxn0: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (lsigTxn0) for assignRole must be a pay transaction
	assert

	// challenges: byte[]
	txna ApplicationArgs 5
	extract 2 0

	// sig: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// keyImage: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// pkAll: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// msg: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute assignRole(byte[],byte[],byte[],byte[],byte[],pay)bool
	callsub assignRole
	bytec 11 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// assignRole(msg: bytes, pkAll: bytes, keyImage: bytes, sig: bytes, challenges: bytes, lsigTxn0: PayTxn): boolean
assignRole:
	proto 6 1

	// *if11_condition
	// contracts/TownHall.algo.ts:307
	// this.gameState.value !== 1
	bytec 4 //  "gameState"
	app_global_get
	intc 0 // 1
	!=
	bz *if11_end

	// *if11_consequent
	// contracts/TownHall.algo.ts:308
	// return false;
	intc 1 // 0
	retsub

*if11_end:
	// contracts/TownHall.algo.ts:319
	// assert(!this.hashFilter(rawBytes(sha256(keyImage))).exists)
	frame_dig -3 // keyImage: bytes
	sha256
	box_len
	swap
	pop
	!
	assert

	// contracts/TownHall.algo.ts:320
	// this.hashFilter(rawBytes(sha256(keyImage))).create(0)
	frame_dig -3 // keyImage: bytes
	sha256
	intc 1 // 0
	box_create
	pop

	// contracts/TownHall.algo.ts:325
	// assert(msg === 'Hello World')
	frame_dig -1 // msg: bytes
	pushbytes 0x48656c6c6f20576f726c64 // "Hello World"
	==
	assert

	// contracts/TownHall.algo.ts:328
	// assert(this.quickAccessPKBoxes(0).extract(0, 6 * BLS12381G1_LENGTH) === pkAll)
	bytec 1 // 0x0000000000000000
	intc 1 // 0
	pushint 576
	box_extract
	frame_dig -2 // pkAll: bytes
	==
	assert

	// contracts/TownHall.algo.ts:331
	// assert(extract3(sig, 0, RING_SIG_NONCE_LENGTH) === extract3(challenges, 0, RING_SIG_CHALL_LENGTH))
	frame_dig -4 // sig: bytes
	extract 0 32
	frame_dig -5 // challenges: bytes
	extract 0 32
	==
	assert

	// contracts/TownHall.algo.ts:335
	// verifyTxn(lsigTxn0, { sender: Address.fromBytes(RingLinkLSig0.address()) })
	// verify sender
	frame_dig -6 // lsigTxn0: PayTxn
	gtxns Sender
	pushbytes 0x6ff9efc1e162b2c8a299f6078fd4ff74c6786cc4da3102ca06a225341a87a9ed // addr "N7467QPBMKZMRIUZ6YDY7VH7OTDHQ3GE3IYQFSQGUISTIGUHVHWTPIQPPU"
	==

	// transaction verification failed: {"txn":"lsigTxn0","field":"sender","expected":"Address.fromBytes(RingLinkLSig0.address())"}
	assert

	// contracts/TownHall.algo.ts:369
	// return false;
	intc 1 // 0
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x70ceea1b // method "dummyOpUp(uint64)uint64"
	pushbytes 0xce0cf933 // method "testt(byte[],byte[],byte[],byte[],byte[])byte[]"
	pushbytes 0xa017bd8c // method "dlog(byte[],byte[],byte[],byte[])bool"
	pushbytes 0xd772cdbc // method "hashPointToPoint(byte[])byte[]"
	pushbytes 0xf540ba2c // method "getGameState()uint64"
	pushbytes 0x3aa20cea // method "joinGameLobby(byte[])bool"
	pushbytes 0xb653f57c // method "assignRole(byte[],byte[],byte[],byte[],byte[],pay)bool"
	txna ApplicationArgs 0
	match *abi_route_dummyOpUp *abi_route_testt *abi_route_dlog *abi_route_hashPointToPoint *abi_route_getGameState *abi_route_joinGameLobby *abi_route_assignRole

	// this contract does not implement the given ABI method for call NoOp
	err