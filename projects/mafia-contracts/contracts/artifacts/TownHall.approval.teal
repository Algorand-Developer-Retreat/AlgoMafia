#pragma version 10
intcblock 1 0 96 6
bytecblock 0x706c61796572734a6f696e6564 0x0000000000000000 0x 0x151f7c75 0x67616d655374617465 0x706c6179657231416c676f41646472 0x706c6179657232416c676f41646472 0x706c6179657233416c676f41646472 0x706c6179657234416c676f41646472 0x706c6179657235416c676f41646472 0x706c6179657236416c676f41646472 0x00

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/TownHall.algo.ts:82
	// this.player1AlgoAddr.value = globals.zeroAddress
	bytec 5 //  "player1AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:83
	// this.player2AlgoAddr.value = globals.zeroAddress
	bytec 6 //  "player2AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:84
	// this.player3AlgoAddr.value = globals.zeroAddress
	bytec 7 //  "player3AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:85
	// this.player4AlgoAddr.value = globals.zeroAddress
	bytec 8 //  "player4AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:86
	// this.player5AlgoAddr.value = globals.zeroAddress
	bytec 9 //  "player5AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:87
	// this.player6AlgoAddr.value = globals.zeroAddress
	bytec 10 //  "player6AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:89
	// this.maffia.value = globals.zeroAddress
	pushbytes 0x6d6166666961 // "maffia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:90
	// this.doctor.value = globals.zeroAddress
	pushbytes 0x646f63746f72 // "doctor"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:91
	// this.farmer.value = globals.zeroAddress
	pushbytes 0x6661726d6572 // "farmer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:92
	// this.butcher.value = globals.zeroAddress
	pushbytes 0x62757463686572 // "butcher"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:93
	// this.innkeep.value = globals.zeroAddress
	pushbytes 0x696e6e6b656570 // "innkeep"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:94
	// this.grocer.value = globals.zeroAddress
	pushbytes 0x67726f636572 // "grocer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:96
	// this.playersJoined.value = 0
	bytec 0 //  "playersJoined"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:104
	// this.gameState.value = 0
	bytec 4 //  "gameState"
	intc 1 // 0
	app_global_put
	retsub

// dummyOpUp(uint64)uint64
*abi_route_dummyOpUp:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute dummyOpUp(uint64)uint64
	callsub dummyOpUp
	itob
	concat
	log
	intc 0 // 1
	return

// dummyOpUp(i: uint64): uint64
//
// Dummy Op Up
// Dummy operation to get more opcode budget
// @i - The number to return, necssary to deduplicate the name
// @returns the number (but we do nothing with it)
dummyOpUp:
	proto 1 1

	// contracts/TownHall.algo.ts:124
	// return i;
	frame_dig -1 // i: uint64
	retsub

// dlog(byte[],byte[],byte[],byte[])bool
*abi_route_dlog:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// z: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// v: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// x: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// g: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dlog(byte[],byte[],byte[],byte[])bool
	callsub dlog
	bytec 11 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// dlog(g: bytes, x: bytes, v: bytes, z: bytes): boolean
dlog:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// contracts/TownHall.algo.ts:148
	// hash = keccak256(concat(g, concat(x, v)))
	frame_dig -1 // g: bytes
	frame_dig -2 // x: bytes
	frame_dig -3 // v: bytes
	concat
	concat
	keccak256
	frame_bury 0 // hash: byte[32]

	// contracts/TownHall.algo.ts:149
	// challenge = btobigint(hash) % btobigint(hex(BLS12381_CURVE_ORDER_HEX))
	frame_dig 0 // hash: byte[32]
	pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
	b%
	frame_bury 1 // challenge: bigint

	// contracts/TownHall.algo.ts:151
	// return (
	//       v === ecAdd('BLS12_381g1', ecScalarMul('BLS12_381g1', g, z), ecScalarMul('BLS12_381g1', x, rawBytes(challenge)))
	//     );
	frame_dig -3 // v: bytes
	frame_dig -1 // g: bytes
	frame_dig -4 // z: bytes
	ec_scalar_mul BLS12_381g1
	frame_dig -2 // x: bytes
	frame_dig 1 // challenge: bigint
	ec_scalar_mul BLS12_381g1
	ec_add BLS12_381g1
	==

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// hashPointToPoint(byte[])byte[]
*abi_route_hashPointToPoint:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// point: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute hashPointToPoint(byte[])byte[]
	callsub hashPointToPoint
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// hashPointToPoint(point: bytes): bytes
hashPointToPoint:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// contracts/TownHall.algo.ts:157
	// hash = keccak256(point)
	frame_dig -1 // point: bytes
	keccak256
	frame_bury 0 // hash: byte[32]

	// contracts/TownHall.algo.ts:158
	// fpElement = btobigint(hash) % btobigint(hex(BLS12381_FIELD_MODULUS_HEX))
	frame_dig 0 // hash: byte[32]
	pushbytes 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab
	b%
	frame_bury 1 // fpElement: bigint

	// contracts/TownHall.algo.ts:161
	// result = ecMapTo('BLS12_381g1', rawBytes(fpElement))
	frame_dig 1 // fpElement: bigint
	ec_map_to BLS12_381g1
	frame_bury 2 // result: byte[]

	// contracts/TownHall.algo.ts:162
	// return result;
	frame_dig 2 // result: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getGameState()uint64
*abi_route_getGameState:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// execute getGameState()uint64
	callsub getGameState
	itob
	concat
	log
	intc 0 // 1
	return

// getGameState(): uint64
getGameState:
	proto 0 1

	// contracts/TownHall.algo.ts:168
	// return this.gameState.value;
	bytec 4 //  "gameState"
	app_global_get
	retsub

// joinGameLobby(byte[])bool
*abi_route_joinGameLobby:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// NIZK_DLOG: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute joinGameLobby(byte[])bool
	callsub joinGameLobby
	bytec 11 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// joinGameLobby(NIZK_DLOG: bytes): boolean
joinGameLobby:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 3

	// *if0_condition
	// contracts/TownHall.algo.ts:172
	// this.gameState.value !== 0
	bytec 4 //  "gameState"
	app_global_get
	intc 1 // 0
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/TownHall.algo.ts:173
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if0_end:
	// *if1_condition
	// contracts/TownHall.algo.ts:176
	// this.playersJoined.value === 6
	bytec 0 //  "playersJoined"
	app_global_get
	intc 3 // 6
	==
	bz *if1_end

	// *if1_consequent
	// contracts/TownHall.algo.ts:177
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if1_end:
	// contracts/TownHall.algo.ts:180
	// g = extract3(NIZK_DLOG, 0, BLS12381G1_LENGTH)
	frame_dig -1 // NIZK_DLOG: bytes
	extract 0 96
	frame_bury 0 // g: byte[]

	// contracts/TownHall.algo.ts:181
	// RingPK = extract3(NIZK_DLOG, BLS12381G1_LENGTH, BLS12381G1_LENGTH)
	frame_dig -1 // NIZK_DLOG: bytes
	extract 96 96
	frame_bury 1 // RingPK: byte[]

	// contracts/TownHall.algo.ts:182
	// v = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 2, BLS12381G1_LENGTH)
	frame_dig -1 // NIZK_DLOG: bytes
	extract 192 96
	frame_bury 2 // v: byte[]

	// contracts/TownHall.algo.ts:183
	// z = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 3, 32)
	frame_dig -1 // NIZK_DLOG: bytes
	pushint 288
	pushint 32
	extract3
	frame_bury 3 // z: byte[]

	// *if2_condition
	// contracts/TownHall.algo.ts:188
	// !this.dlog(g, RingPK, v, z)
	frame_dig 3 // z: byte[]
	frame_dig 2 // v: byte[]
	frame_dig 1 // RingPK: byte[]
	frame_dig 0 // g: byte[]
	callsub dlog
	!
	bz *if2_end

	// *if2_consequent
	// contracts/TownHall.algo.ts:189
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if2_end:
	// *if3_condition
	// contracts/TownHall.algo.ts:192
	// !this.quickAccessPKBoxes(0).exists
	bytec 1 // 0x0000000000000000
	box_len
	swap
	pop
	!
	bz *if3_else

	// *if3_consequent
	// contracts/TownHall.algo.ts:193
	// this.quickAccessPKBoxes(0).create(BLS12381G1_LENGTH)
	bytec 1 // 0x0000000000000000
	intc 2 // 96
	box_create
	pop
	b *if3_end

*if3_else:
	// contracts/TownHall.algo.ts:195
	// this.quickAccessPKBoxes(0).resize(this.quickAccessPKBoxes(0).size + BLS12381G1_LENGTH)
	bytec 1 // 0x0000000000000000
	dup
	box_len

	// box value does not exist: this.quickAccessPKBoxes(0).size
	assert
	intc 2 // 96
	+
	box_resize

*if3_end:
	// *if4_condition
	// contracts/TownHall.algo.ts:199
	// !this.quickAccessPKBoxes(0).exists
	bytec 1 // 0x0000000000000000
	box_len
	swap
	pop
	!
	bz *if4_end

	// *if4_consequent
	// contracts/TownHall.algo.ts:200
	// return false;
	intc 1 // 0
	b *joinGameLobby*return

*if4_end:
	// *if5_condition
	// contracts/TownHall.algo.ts:203
	// this.player1AlgoAddr.value === globals.zeroAddress
	bytec 5 //  "player1AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if5_end

	// *if5_consequent
	// contracts/TownHall.algo.ts:204
	// this.player1AlgoAddr.value = this.txn.sender
	bytec 5 //  "player1AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:206
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 1 // 0x0000000000000000
	bytec 0 //  "playersJoined"
	app_global_get
	intc 2 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:207
	// this.playersJoined.value += 1
	bytec 0 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:208
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if5_end:
	// *if6_condition
	// contracts/TownHall.algo.ts:210
	// this.player2AlgoAddr.value === globals.zeroAddress
	bytec 6 //  "player2AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if6_end

	// *if6_consequent
	// contracts/TownHall.algo.ts:211
	// this.player2AlgoAddr.value = this.txn.sender
	bytec 6 //  "player2AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:213
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 1 // 0x0000000000000000
	bytec 0 //  "playersJoined"
	app_global_get
	intc 2 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:214
	// this.playersJoined.value += 1
	bytec 0 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:215
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if6_end:
	// *if7_condition
	// contracts/TownHall.algo.ts:217
	// this.player3AlgoAddr.value === globals.zeroAddress
	bytec 7 //  "player3AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if7_end

	// *if7_consequent
	// contracts/TownHall.algo.ts:218
	// this.player3AlgoAddr.value = this.txn.sender
	bytec 7 //  "player3AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:220
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 1 // 0x0000000000000000
	bytec 0 //  "playersJoined"
	app_global_get
	intc 2 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:221
	// this.playersJoined.value += 1
	bytec 0 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:222
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if7_end:
	// *if8_condition
	// contracts/TownHall.algo.ts:224
	// this.player4AlgoAddr.value === globals.zeroAddress
	bytec 8 //  "player4AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if8_end

	// *if8_consequent
	// contracts/TownHall.algo.ts:225
	// this.player4AlgoAddr.value = this.txn.sender
	bytec 8 //  "player4AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:227
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 1 // 0x0000000000000000
	bytec 0 //  "playersJoined"
	app_global_get
	intc 2 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:228
	// this.playersJoined.value += 1
	bytec 0 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:229
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if8_end:
	// *if9_condition
	// contracts/TownHall.algo.ts:231
	// this.player5AlgoAddr.value === globals.zeroAddress
	bytec 9 //  "player5AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if9_end

	// *if9_consequent
	// contracts/TownHall.algo.ts:232
	// this.player5AlgoAddr.value = this.txn.sender
	bytec 9 //  "player5AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:234
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 1 // 0x0000000000000000
	bytec 0 //  "playersJoined"
	app_global_get
	intc 2 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:235
	// this.playersJoined.value += 1
	bytec 0 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:236
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if9_end:
	// *if10_condition
	// contracts/TownHall.algo.ts:238
	// this.player6AlgoAddr.value === globals.zeroAddress
	bytec 10 //  "player6AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if10_end

	// *if10_consequent
	// contracts/TownHall.algo.ts:239
	// this.player6AlgoAddr.value = this.txn.sender
	bytec 10 //  "player6AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:241
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 1 // 0x0000000000000000
	bytec 0 //  "playersJoined"
	app_global_get
	intc 2 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:242
	// this.playersJoined.value += 1
	bytec 0 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:243
	// this.gameState.value = 1
	bytec 4 //  "gameState"
	intc 0 // 1
	app_global_put

	// contracts/TownHall.algo.ts:244
	// return true;
	intc 0 // 1
	b *joinGameLobby*return

*if10_end:
	// contracts/TownHall.algo.ts:247
	// return false;
	intc 1 // 0

*joinGameLobby*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x70ceea1b // method "dummyOpUp(uint64)uint64"
	pushbytes 0xa017bd8c // method "dlog(byte[],byte[],byte[],byte[])bool"
	pushbytes 0xd772cdbc // method "hashPointToPoint(byte[])byte[]"
	pushbytes 0xf540ba2c // method "getGameState()uint64"
	pushbytes 0x3aa20cea // method "joinGameLobby(byte[])bool"
	txna ApplicationArgs 0
	match *abi_route_dummyOpUp *abi_route_dlog *abi_route_hashPointToPoint *abi_route_getGameState *abi_route_joinGameLobby

	// this contract does not implement the given ABI method for call NoOp
	err