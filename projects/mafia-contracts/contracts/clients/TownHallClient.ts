/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TownHall","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"dummyOpUp","desc":"Dummy Op Up\nDummy operation to get more opcode budget\n - The number to return, necssary to deduplicate the name","args":[{"name":"i","type":"uint64"}],"returns":{"type":"uint64","desc":"the number (but we do nothing with it)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dlog","args":[{"name":"g","type":"byte[]"},{"name":"x","type":"byte[]"},{"name":"v","type":"byte[]"},{"name":"z","type":"byte[]"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"hashPointToPoint","args":[{"name":"point","type":"byte[]"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getGameState","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"joinGameLobby","args":[{"name":"NIZK_DLOG","type":"byte[]"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":17,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"player1AlgoAddr":{"key":"cGxheWVyMUFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player2AlgoAddr":{"key":"cGxheWVyMkFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player3AlgoAddr":{"key":"cGxheWVyM0FsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player4AlgoAddr":{"key":"cGxheWVyNEFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player5AlgoAddr":{"key":"cGxheWVyNUFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player6AlgoAddr":{"key":"cGxheWVyNkFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"maffia":{"key":"bWFmZmlh","keyType":"AVMBytes","valueType":"address"},"doctor":{"key":"ZG9jdG9y","keyType":"AVMBytes","valueType":"address"},"farmer":{"key":"ZmFybWVy","keyType":"AVMBytes","valueType":"address"},"butcher":{"key":"YnV0Y2hlcg==","keyType":"AVMBytes","valueType":"address"},"innkeep":{"key":"aW5ua2VlcA==","keyType":"AVMBytes","valueType":"address"},"grocer":{"key":"Z3JvY2Vy","keyType":"AVMBytes","valueType":"address"},"justKilledPlayer":{"key":"anVzdEtpbGxlZFBsYXllcg==","keyType":"AVMBytes","valueType":"address"},"justKilledTimeOfDeath":{"key":"anVzdEtpbGxlZFRpbWVPZkRlYXRo","keyType":"AVMBytes","valueType":"uint64"},"maffiaCommitment":{"key":"bWFmZmlhQ29tbWl0bWVudA==","keyType":"AVMBytes","valueType":"AVMBytes"},"doctorCommitment":{"key":"ZG9jdG9yQ29tbWl0bWVudA==","keyType":"AVMBytes","valueType":"AVMBytes"},"maffiaVictim":{"key":"bWFmZmlhVmljdGlt","keyType":"AVMBytes","valueType":"AVMBytes"},"doctorPatient":{"key":"ZG9jdG9yUGF0aWVudA==","keyType":"AVMBytes","valueType":"AVMBytes"},"playersJoined":{"key":"cGxheWVyc0pvaW5lZA==","keyType":"AVMBytes","valueType":"uint64"},"gameState":{"key":"Z2FtZVN0YXRl","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"quickAccessPKBoxes":{"keyType":"uint64","valueType":"AVMBytes"},"hashFilter":{"keyType":"AVMBytes","valueType":"AVMBytes"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/TownHall.algo.ts:17","pc":[0]},{"teal":2,"source":"contracts/TownHall.algo.ts:17","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/TownHall.algo.ts:17","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145]},{"teal":15,"source":"contracts/TownHall.algo.ts:17","pc":[146,147]},{"teal":16,"source":"contracts/TownHall.algo.ts:17","pc":[148]},{"teal":17,"source":"contracts/TownHall.algo.ts:17","pc":[149]},{"teal":18,"source":"contracts/TownHall.algo.ts:17","pc":[150]},{"teal":19,"source":"contracts/TownHall.algo.ts:17","pc":[151,152]},{"teal":20,"source":"contracts/TownHall.algo.ts:17","pc":[153]},{"teal":21,"source":"contracts/TownHall.algo.ts:17","pc":[154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179]},{"teal":25,"source":"contracts/TownHall.algo.ts:17","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[180]},{"teal":30,"source":"contracts/TownHall.algo.ts:81","pc":[181,182,183]},{"teal":31,"source":"contracts/TownHall.algo.ts:81","pc":[184]},{"teal":32,"source":"contracts/TownHall.algo.ts:81","pc":[185]},{"teal":36,"source":"contracts/TownHall.algo.ts:81","pc":[186,187,188]},{"teal":40,"source":"contracts/TownHall.algo.ts:82","pc":[189,190]},{"teal":41,"source":"contracts/TownHall.algo.ts:82","pc":[191,192]},{"teal":42,"source":"contracts/TownHall.algo.ts:82","pc":[193]},{"teal":46,"source":"contracts/TownHall.algo.ts:83","pc":[194,195]},{"teal":47,"source":"contracts/TownHall.algo.ts:83","pc":[196,197]},{"teal":48,"source":"contracts/TownHall.algo.ts:83","pc":[198]},{"teal":52,"source":"contracts/TownHall.algo.ts:84","pc":[199,200]},{"teal":53,"source":"contracts/TownHall.algo.ts:84","pc":[201,202]},{"teal":54,"source":"contracts/TownHall.algo.ts:84","pc":[203]},{"teal":58,"source":"contracts/TownHall.algo.ts:85","pc":[204,205]},{"teal":59,"source":"contracts/TownHall.algo.ts:85","pc":[206,207]},{"teal":60,"source":"contracts/TownHall.algo.ts:85","pc":[208]},{"teal":64,"source":"contracts/TownHall.algo.ts:86","pc":[209,210]},{"teal":65,"source":"contracts/TownHall.algo.ts:86","pc":[211,212]},{"teal":66,"source":"contracts/TownHall.algo.ts:86","pc":[213]},{"teal":70,"source":"contracts/TownHall.algo.ts:87","pc":[214,215]},{"teal":71,"source":"contracts/TownHall.algo.ts:87","pc":[216,217]},{"teal":72,"source":"contracts/TownHall.algo.ts:87","pc":[218]},{"teal":76,"source":"contracts/TownHall.algo.ts:89","pc":[219,220,221,222,223,224,225,226]},{"teal":77,"source":"contracts/TownHall.algo.ts:89","pc":[227,228]},{"teal":78,"source":"contracts/TownHall.algo.ts:89","pc":[229]},{"teal":82,"source":"contracts/TownHall.algo.ts:90","pc":[230,231,232,233,234,235,236,237]},{"teal":83,"source":"contracts/TownHall.algo.ts:90","pc":[238,239]},{"teal":84,"source":"contracts/TownHall.algo.ts:90","pc":[240]},{"teal":88,"source":"contracts/TownHall.algo.ts:91","pc":[241,242,243,244,245,246,247,248]},{"teal":89,"source":"contracts/TownHall.algo.ts:91","pc":[249,250]},{"teal":90,"source":"contracts/TownHall.algo.ts:91","pc":[251]},{"teal":94,"source":"contracts/TownHall.algo.ts:92","pc":[252,253,254,255,256,257,258,259,260]},{"teal":95,"source":"contracts/TownHall.algo.ts:92","pc":[261,262]},{"teal":96,"source":"contracts/TownHall.algo.ts:92","pc":[263]},{"teal":100,"source":"contracts/TownHall.algo.ts:93","pc":[264,265,266,267,268,269,270,271,272]},{"teal":101,"source":"contracts/TownHall.algo.ts:93","pc":[273,274]},{"teal":102,"source":"contracts/TownHall.algo.ts:93","pc":[275]},{"teal":106,"source":"contracts/TownHall.algo.ts:94","pc":[276,277,278,279,280,281,282,283]},{"teal":107,"source":"contracts/TownHall.algo.ts:94","pc":[284,285]},{"teal":108,"source":"contracts/TownHall.algo.ts:94","pc":[286]},{"teal":112,"source":"contracts/TownHall.algo.ts:96","pc":[287]},{"teal":113,"source":"contracts/TownHall.algo.ts:96","pc":[288]},{"teal":114,"source":"contracts/TownHall.algo.ts:96","pc":[289]},{"teal":118,"source":"contracts/TownHall.algo.ts:104","pc":[290,291]},{"teal":119,"source":"contracts/TownHall.algo.ts:104","pc":[292]},{"teal":120,"source":"contracts/TownHall.algo.ts:104","pc":[293]},{"teal":121,"source":"contracts/TownHall.algo.ts:81","pc":[294]},{"teal":126,"source":"contracts/TownHall.algo.ts:123","pc":[295]},{"teal":129,"source":"contracts/TownHall.algo.ts:123","pc":[296,297,298]},{"teal":130,"source":"contracts/TownHall.algo.ts:123","pc":[299]},{"teal":133,"source":"contracts/TownHall.algo.ts:123","pc":[300,301,302]},{"teal":134,"source":"contracts/TownHall.algo.ts:123","pc":[303]},{"teal":135,"source":"contracts/TownHall.algo.ts:123","pc":[304]},{"teal":136,"source":"contracts/TownHall.algo.ts:123","pc":[305]},{"teal":137,"source":"contracts/TownHall.algo.ts:123","pc":[306]},{"teal":138,"source":"contracts/TownHall.algo.ts:123","pc":[307]},{"teal":147,"source":"contracts/TownHall.algo.ts:123","pc":[308,309,310]},{"teal":151,"source":"contracts/TownHall.algo.ts:124","pc":[311,312]},{"teal":152,"source":"contracts/TownHall.algo.ts:123","pc":[313]},{"teal":157,"source":"contracts/TownHall.algo.ts:146","pc":[314]},{"teal":160,"source":"contracts/TownHall.algo.ts:146","pc":[315,316,317]},{"teal":161,"source":"contracts/TownHall.algo.ts:146","pc":[318,319,320]},{"teal":164,"source":"contracts/TownHall.algo.ts:146","pc":[321,322,323]},{"teal":165,"source":"contracts/TownHall.algo.ts:146","pc":[324,325,326]},{"teal":168,"source":"contracts/TownHall.algo.ts:146","pc":[327,328,329]},{"teal":169,"source":"contracts/TownHall.algo.ts:146","pc":[330,331,332]},{"teal":172,"source":"contracts/TownHall.algo.ts:146","pc":[333,334,335]},{"teal":173,"source":"contracts/TownHall.algo.ts:146","pc":[336,337,338]},{"teal":176,"source":"contracts/TownHall.algo.ts:146","pc":[339,340,341]},{"teal":177,"source":"contracts/TownHall.algo.ts:146","pc":[342,343]},{"teal":178,"source":"contracts/TownHall.algo.ts:146","pc":[344]},{"teal":179,"source":"contracts/TownHall.algo.ts:146","pc":[345,346]},{"teal":180,"source":"contracts/TownHall.algo.ts:146","pc":[347]},{"teal":181,"source":"contracts/TownHall.algo.ts:146","pc":[348]},{"teal":182,"source":"contracts/TownHall.algo.ts:146","pc":[349]},{"teal":183,"source":"contracts/TownHall.algo.ts:146","pc":[350]},{"teal":184,"source":"contracts/TownHall.algo.ts:146","pc":[351]},{"teal":188,"source":"contracts/TownHall.algo.ts:146","pc":[352,353,354]},{"teal":191,"source":"contracts/TownHall.algo.ts:146","pc":[355]},{"teal":192,"source":"contracts/TownHall.algo.ts:146","pc":[356]},{"teal":196,"source":"contracts/TownHall.algo.ts:148","pc":[357,358]},{"teal":197,"source":"contracts/TownHall.algo.ts:148","pc":[359,360]},{"teal":198,"source":"contracts/TownHall.algo.ts:148","pc":[361,362]},{"teal":199,"source":"contracts/TownHall.algo.ts:148","pc":[363]},{"teal":200,"source":"contracts/TownHall.algo.ts:148","pc":[364]},{"teal":201,"source":"contracts/TownHall.algo.ts:148","pc":[365]},{"teal":202,"source":"contracts/TownHall.algo.ts:148","pc":[366,367]},{"teal":206,"source":"contracts/TownHall.algo.ts:149","pc":[368,369]},{"teal":207,"source":"contracts/TownHall.algo.ts:149","pc":[370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403]},{"teal":208,"source":"contracts/TownHall.algo.ts:149","pc":[404]},{"teal":209,"source":"contracts/TownHall.algo.ts:149","pc":[405,406]},{"teal":215,"source":"contracts/TownHall.algo.ts:152","pc":[407,408]},{"teal":216,"source":"contracts/TownHall.algo.ts:152","pc":[409,410]},{"teal":217,"source":"contracts/TownHall.algo.ts:152","pc":[411,412]},{"teal":218,"source":"contracts/TownHall.algo.ts:152","pc":[413,414]},{"teal":219,"source":"contracts/TownHall.algo.ts:152","pc":[415,416]},{"teal":220,"source":"contracts/TownHall.algo.ts:152","pc":[417,418]},{"teal":221,"source":"contracts/TownHall.algo.ts:152","pc":[419,420]},{"teal":222,"source":"contracts/TownHall.algo.ts:152","pc":[421,422]},{"teal":223,"source":"contracts/TownHall.algo.ts:152","pc":[423]},{"teal":226,"source":"contracts/TownHall.algo.ts:146","pc":[424,425]},{"teal":229,"source":"contracts/TownHall.algo.ts:146","pc":[426,427]},{"teal":230,"source":"contracts/TownHall.algo.ts:146","pc":[428]},{"teal":235,"source":"contracts/TownHall.algo.ts:156","pc":[429]},{"teal":238,"source":"contracts/TownHall.algo.ts:156","pc":[430,431,432]},{"teal":239,"source":"contracts/TownHall.algo.ts:156","pc":[433,434,435]},{"teal":242,"source":"contracts/TownHall.algo.ts:156","pc":[436,437,438]},{"teal":243,"source":"contracts/TownHall.algo.ts:156","pc":[439]},{"teal":244,"source":"contracts/TownHall.algo.ts:156","pc":[440]},{"teal":245,"source":"contracts/TownHall.algo.ts:156","pc":[441]},{"teal":246,"source":"contracts/TownHall.algo.ts:156","pc":[442,443,444]},{"teal":247,"source":"contracts/TownHall.algo.ts:156","pc":[445]},{"teal":248,"source":"contracts/TownHall.algo.ts:156","pc":[446]},{"teal":249,"source":"contracts/TownHall.algo.ts:156","pc":[447]},{"teal":250,"source":"contracts/TownHall.algo.ts:156","pc":[448]},{"teal":251,"source":"contracts/TownHall.algo.ts:156","pc":[449]},{"teal":252,"source":"contracts/TownHall.algo.ts:156","pc":[450]},{"teal":256,"source":"contracts/TownHall.algo.ts:156","pc":[451,452,453]},{"teal":259,"source":"contracts/TownHall.algo.ts:156","pc":[454]},{"teal":260,"source":"contracts/TownHall.algo.ts:156","pc":[455,456]},{"teal":264,"source":"contracts/TownHall.algo.ts:157","pc":[457,458]},{"teal":265,"source":"contracts/TownHall.algo.ts:157","pc":[459]},{"teal":266,"source":"contracts/TownHall.algo.ts:157","pc":[460,461]},{"teal":270,"source":"contracts/TownHall.algo.ts:158","pc":[462,463]},{"teal":271,"source":"contracts/TownHall.algo.ts:158","pc":[464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513]},{"teal":272,"source":"contracts/TownHall.algo.ts:158","pc":[514]},{"teal":273,"source":"contracts/TownHall.algo.ts:158","pc":[515,516]},{"teal":277,"source":"contracts/TownHall.algo.ts:161","pc":[517,518]},{"teal":278,"source":"contracts/TownHall.algo.ts:161","pc":[519,520]},{"teal":279,"source":"contracts/TownHall.algo.ts:161","pc":[521,522]},{"teal":283,"source":"contracts/TownHall.algo.ts:162","pc":[523,524]},{"teal":286,"source":"contracts/TownHall.algo.ts:156","pc":[525,526]},{"teal":289,"source":"contracts/TownHall.algo.ts:156","pc":[527,528]},{"teal":290,"source":"contracts/TownHall.algo.ts:156","pc":[529]},{"teal":295,"source":"contracts/TownHall.algo.ts:167","pc":[530]},{"teal":298,"source":"contracts/TownHall.algo.ts:167","pc":[531,532,533]},{"teal":299,"source":"contracts/TownHall.algo.ts:167","pc":[534]},{"teal":300,"source":"contracts/TownHall.algo.ts:167","pc":[535]},{"teal":301,"source":"contracts/TownHall.algo.ts:167","pc":[536]},{"teal":302,"source":"contracts/TownHall.algo.ts:167","pc":[537]},{"teal":303,"source":"contracts/TownHall.algo.ts:167","pc":[538]},{"teal":307,"source":"contracts/TownHall.algo.ts:167","pc":[539,540,541]},{"teal":311,"source":"contracts/TownHall.algo.ts:168","pc":[542,543]},{"teal":312,"source":"contracts/TownHall.algo.ts:168","pc":[544]},{"teal":313,"source":"contracts/TownHall.algo.ts:167","pc":[545]},{"teal":318,"source":"contracts/TownHall.algo.ts:171","pc":[546]},{"teal":321,"source":"contracts/TownHall.algo.ts:171","pc":[547,548,549]},{"teal":322,"source":"contracts/TownHall.algo.ts:171","pc":[550,551,552]},{"teal":325,"source":"contracts/TownHall.algo.ts:171","pc":[553,554,555]},{"teal":326,"source":"contracts/TownHall.algo.ts:171","pc":[556,557]},{"teal":327,"source":"contracts/TownHall.algo.ts:171","pc":[558]},{"teal":328,"source":"contracts/TownHall.algo.ts:171","pc":[559,560]},{"teal":329,"source":"contracts/TownHall.algo.ts:171","pc":[561]},{"teal":330,"source":"contracts/TownHall.algo.ts:171","pc":[562]},{"teal":331,"source":"contracts/TownHall.algo.ts:171","pc":[563]},{"teal":332,"source":"contracts/TownHall.algo.ts:171","pc":[564]},{"teal":333,"source":"contracts/TownHall.algo.ts:171","pc":[565]},{"teal":337,"source":"contracts/TownHall.algo.ts:171","pc":[566,567,568]},{"teal":340,"source":"contracts/TownHall.algo.ts:171","pc":[569]},{"teal":341,"source":"contracts/TownHall.algo.ts:171","pc":[570,571]},{"teal":346,"source":"contracts/TownHall.algo.ts:172","pc":[572,573]},{"teal":347,"source":"contracts/TownHall.algo.ts:172","pc":[574]},{"teal":348,"source":"contracts/TownHall.algo.ts:172","pc":[575]},{"teal":349,"source":"contracts/TownHall.algo.ts:172","pc":[576]},{"teal":350,"source":"contracts/TownHall.algo.ts:172","pc":[577,578,579]},{"teal":355,"source":"contracts/TownHall.algo.ts:173","pc":[580]},{"teal":356,"source":"contracts/TownHall.algo.ts:173","pc":[581,582,583]},{"teal":362,"source":"contracts/TownHall.algo.ts:176","pc":[584]},{"teal":363,"source":"contracts/TownHall.algo.ts:176","pc":[585]},{"teal":364,"source":"contracts/TownHall.algo.ts:176","pc":[586]},{"teal":365,"source":"contracts/TownHall.algo.ts:176","pc":[587]},{"teal":366,"source":"contracts/TownHall.algo.ts:176","pc":[588,589,590]},{"teal":371,"source":"contracts/TownHall.algo.ts:177","pc":[591]},{"teal":372,"source":"contracts/TownHall.algo.ts:177","pc":[592,593,594]},{"teal":377,"source":"contracts/TownHall.algo.ts:180","pc":[595,596]},{"teal":378,"source":"contracts/TownHall.algo.ts:180","pc":[597,598,599]},{"teal":379,"source":"contracts/TownHall.algo.ts:180","pc":[600,601]},{"teal":383,"source":"contracts/TownHall.algo.ts:181","pc":[602,603]},{"teal":384,"source":"contracts/TownHall.algo.ts:181","pc":[604,605,606]},{"teal":385,"source":"contracts/TownHall.algo.ts:181","pc":[607,608]},{"teal":389,"source":"contracts/TownHall.algo.ts:182","pc":[609,610]},{"teal":390,"source":"contracts/TownHall.algo.ts:182","pc":[611,612,613]},{"teal":391,"source":"contracts/TownHall.algo.ts:182","pc":[614,615]},{"teal":395,"source":"contracts/TownHall.algo.ts:183","pc":[616,617]},{"teal":396,"source":"contracts/TownHall.algo.ts:183","pc":[618,619,620]},{"teal":397,"source":"contracts/TownHall.algo.ts:183","pc":[621,622]},{"teal":398,"source":"contracts/TownHall.algo.ts:183","pc":[623]},{"teal":399,"source":"contracts/TownHall.algo.ts:183","pc":[624,625]},{"teal":404,"source":"contracts/TownHall.algo.ts:188","pc":[626,627]},{"teal":405,"source":"contracts/TownHall.algo.ts:188","pc":[628,629]},{"teal":406,"source":"contracts/TownHall.algo.ts:188","pc":[630,631]},{"teal":407,"source":"contracts/TownHall.algo.ts:188","pc":[632,633]},{"teal":408,"source":"contracts/TownHall.algo.ts:188","pc":[634,635,636]},{"teal":409,"source":"contracts/TownHall.algo.ts:188","pc":[637]},{"teal":410,"source":"contracts/TownHall.algo.ts:188","pc":[638,639,640]},{"teal":415,"source":"contracts/TownHall.algo.ts:189","pc":[641]},{"teal":416,"source":"contracts/TownHall.algo.ts:189","pc":[642,643,644]},{"teal":422,"source":"contracts/TownHall.algo.ts:192","pc":[645]},{"teal":423,"source":"contracts/TownHall.algo.ts:192","pc":[646]},{"teal":424,"source":"contracts/TownHall.algo.ts:192","pc":[647]},{"teal":425,"source":"contracts/TownHall.algo.ts:192","pc":[648]},{"teal":426,"source":"contracts/TownHall.algo.ts:192","pc":[649]},{"teal":427,"source":"contracts/TownHall.algo.ts:192","pc":[650,651,652]},{"teal":432,"source":"contracts/TownHall.algo.ts:193","pc":[653]},{"teal":433,"source":"contracts/TownHall.algo.ts:193","pc":[654]},{"teal":434,"source":"contracts/TownHall.algo.ts:193","pc":[655]},{"teal":435,"source":"contracts/TownHall.algo.ts:193","pc":[656]},{"teal":436,"source":"contracts/TownHall.algo.ts:192","pc":[657,658,659]},{"teal":441,"source":"contracts/TownHall.algo.ts:195","pc":[660]},{"teal":442,"source":"contracts/TownHall.algo.ts:195","pc":[661]},{"teal":443,"source":"contracts/TownHall.algo.ts:195","pc":[662]},{"teal":446,"source":"contracts/TownHall.algo.ts:195","errorMessage":"box value does not exist: this.quickAccessPKBoxes(0).size","pc":[663]},{"teal":447,"source":"contracts/TownHall.algo.ts:195","pc":[664]},{"teal":448,"source":"contracts/TownHall.algo.ts:195","pc":[665]},{"teal":449,"source":"contracts/TownHall.algo.ts:195","pc":[666]},{"teal":455,"source":"contracts/TownHall.algo.ts:199","pc":[667]},{"teal":456,"source":"contracts/TownHall.algo.ts:199","pc":[668]},{"teal":457,"source":"contracts/TownHall.algo.ts:199","pc":[669]},{"teal":458,"source":"contracts/TownHall.algo.ts:199","pc":[670]},{"teal":459,"source":"contracts/TownHall.algo.ts:199","pc":[671]},{"teal":460,"source":"contracts/TownHall.algo.ts:199","pc":[672,673,674]},{"teal":465,"source":"contracts/TownHall.algo.ts:200","pc":[675]},{"teal":466,"source":"contracts/TownHall.algo.ts:200","pc":[676,677,678]},{"teal":472,"source":"contracts/TownHall.algo.ts:203","pc":[679,680]},{"teal":473,"source":"contracts/TownHall.algo.ts:203","pc":[681]},{"teal":474,"source":"contracts/TownHall.algo.ts:203","pc":[682,683]},{"teal":475,"source":"contracts/TownHall.algo.ts:203","pc":[684]},{"teal":476,"source":"contracts/TownHall.algo.ts:203","pc":[685,686,687]},{"teal":481,"source":"contracts/TownHall.algo.ts:204","pc":[688,689]},{"teal":482,"source":"contracts/TownHall.algo.ts:204","pc":[690,691]},{"teal":483,"source":"contracts/TownHall.algo.ts:204","pc":[692]},{"teal":487,"source":"contracts/TownHall.algo.ts:206","pc":[693]},{"teal":488,"source":"contracts/TownHall.algo.ts:206","pc":[694]},{"teal":489,"source":"contracts/TownHall.algo.ts:206","pc":[695]},{"teal":490,"source":"contracts/TownHall.algo.ts:206","pc":[696]},{"teal":491,"source":"contracts/TownHall.algo.ts:206","pc":[697]},{"teal":492,"source":"contracts/TownHall.algo.ts:206","pc":[698,699]},{"teal":493,"source":"contracts/TownHall.algo.ts:206","pc":[700]},{"teal":497,"source":"contracts/TownHall.algo.ts:207","pc":[701]},{"teal":498,"source":"contracts/TownHall.algo.ts:207","pc":[702]},{"teal":499,"source":"contracts/TownHall.algo.ts:207","pc":[703]},{"teal":500,"source":"contracts/TownHall.algo.ts:207","pc":[704]},{"teal":501,"source":"contracts/TownHall.algo.ts:207","pc":[705]},{"teal":502,"source":"contracts/TownHall.algo.ts:207","pc":[706]},{"teal":503,"source":"contracts/TownHall.algo.ts:207","pc":[707]},{"teal":507,"source":"contracts/TownHall.algo.ts:208","pc":[708]},{"teal":508,"source":"contracts/TownHall.algo.ts:208","pc":[709,710,711]},{"teal":514,"source":"contracts/TownHall.algo.ts:210","pc":[712,713]},{"teal":515,"source":"contracts/TownHall.algo.ts:210","pc":[714]},{"teal":516,"source":"contracts/TownHall.algo.ts:210","pc":[715,716]},{"teal":517,"source":"contracts/TownHall.algo.ts:210","pc":[717]},{"teal":518,"source":"contracts/TownHall.algo.ts:210","pc":[718,719,720]},{"teal":523,"source":"contracts/TownHall.algo.ts:211","pc":[721,722]},{"teal":524,"source":"contracts/TownHall.algo.ts:211","pc":[723,724]},{"teal":525,"source":"contracts/TownHall.algo.ts:211","pc":[725]},{"teal":529,"source":"contracts/TownHall.algo.ts:213","pc":[726]},{"teal":530,"source":"contracts/TownHall.algo.ts:213","pc":[727]},{"teal":531,"source":"contracts/TownHall.algo.ts:213","pc":[728]},{"teal":532,"source":"contracts/TownHall.algo.ts:213","pc":[729]},{"teal":533,"source":"contracts/TownHall.algo.ts:213","pc":[730]},{"teal":534,"source":"contracts/TownHall.algo.ts:213","pc":[731,732]},{"teal":535,"source":"contracts/TownHall.algo.ts:213","pc":[733]},{"teal":539,"source":"contracts/TownHall.algo.ts:214","pc":[734]},{"teal":540,"source":"contracts/TownHall.algo.ts:214","pc":[735]},{"teal":541,"source":"contracts/TownHall.algo.ts:214","pc":[736]},{"teal":542,"source":"contracts/TownHall.algo.ts:214","pc":[737]},{"teal":543,"source":"contracts/TownHall.algo.ts:214","pc":[738]},{"teal":544,"source":"contracts/TownHall.algo.ts:214","pc":[739]},{"teal":545,"source":"contracts/TownHall.algo.ts:214","pc":[740]},{"teal":549,"source":"contracts/TownHall.algo.ts:215","pc":[741]},{"teal":550,"source":"contracts/TownHall.algo.ts:215","pc":[742,743,744]},{"teal":556,"source":"contracts/TownHall.algo.ts:217","pc":[745,746]},{"teal":557,"source":"contracts/TownHall.algo.ts:217","pc":[747]},{"teal":558,"source":"contracts/TownHall.algo.ts:217","pc":[748,749]},{"teal":559,"source":"contracts/TownHall.algo.ts:217","pc":[750]},{"teal":560,"source":"contracts/TownHall.algo.ts:217","pc":[751,752,753]},{"teal":565,"source":"contracts/TownHall.algo.ts:218","pc":[754,755]},{"teal":566,"source":"contracts/TownHall.algo.ts:218","pc":[756,757]},{"teal":567,"source":"contracts/TownHall.algo.ts:218","pc":[758]},{"teal":571,"source":"contracts/TownHall.algo.ts:220","pc":[759]},{"teal":572,"source":"contracts/TownHall.algo.ts:220","pc":[760]},{"teal":573,"source":"contracts/TownHall.algo.ts:220","pc":[761]},{"teal":574,"source":"contracts/TownHall.algo.ts:220","pc":[762]},{"teal":575,"source":"contracts/TownHall.algo.ts:220","pc":[763]},{"teal":576,"source":"contracts/TownHall.algo.ts:220","pc":[764,765]},{"teal":577,"source":"contracts/TownHall.algo.ts:220","pc":[766]},{"teal":581,"source":"contracts/TownHall.algo.ts:221","pc":[767]},{"teal":582,"source":"contracts/TownHall.algo.ts:221","pc":[768]},{"teal":583,"source":"contracts/TownHall.algo.ts:221","pc":[769]},{"teal":584,"source":"contracts/TownHall.algo.ts:221","pc":[770]},{"teal":585,"source":"contracts/TownHall.algo.ts:221","pc":[771]},{"teal":586,"source":"contracts/TownHall.algo.ts:221","pc":[772]},{"teal":587,"source":"contracts/TownHall.algo.ts:221","pc":[773]},{"teal":591,"source":"contracts/TownHall.algo.ts:222","pc":[774]},{"teal":592,"source":"contracts/TownHall.algo.ts:222","pc":[775,776,777]},{"teal":598,"source":"contracts/TownHall.algo.ts:224","pc":[778,779]},{"teal":599,"source":"contracts/TownHall.algo.ts:224","pc":[780]},{"teal":600,"source":"contracts/TownHall.algo.ts:224","pc":[781,782]},{"teal":601,"source":"contracts/TownHall.algo.ts:224","pc":[783]},{"teal":602,"source":"contracts/TownHall.algo.ts:224","pc":[784,785,786]},{"teal":607,"source":"contracts/TownHall.algo.ts:225","pc":[787,788]},{"teal":608,"source":"contracts/TownHall.algo.ts:225","pc":[789,790]},{"teal":609,"source":"contracts/TownHall.algo.ts:225","pc":[791]},{"teal":613,"source":"contracts/TownHall.algo.ts:227","pc":[792]},{"teal":614,"source":"contracts/TownHall.algo.ts:227","pc":[793]},{"teal":615,"source":"contracts/TownHall.algo.ts:227","pc":[794]},{"teal":616,"source":"contracts/TownHall.algo.ts:227","pc":[795]},{"teal":617,"source":"contracts/TownHall.algo.ts:227","pc":[796]},{"teal":618,"source":"contracts/TownHall.algo.ts:227","pc":[797,798]},{"teal":619,"source":"contracts/TownHall.algo.ts:227","pc":[799]},{"teal":623,"source":"contracts/TownHall.algo.ts:228","pc":[800]},{"teal":624,"source":"contracts/TownHall.algo.ts:228","pc":[801]},{"teal":625,"source":"contracts/TownHall.algo.ts:228","pc":[802]},{"teal":626,"source":"contracts/TownHall.algo.ts:228","pc":[803]},{"teal":627,"source":"contracts/TownHall.algo.ts:228","pc":[804]},{"teal":628,"source":"contracts/TownHall.algo.ts:228","pc":[805]},{"teal":629,"source":"contracts/TownHall.algo.ts:228","pc":[806]},{"teal":633,"source":"contracts/TownHall.algo.ts:229","pc":[807]},{"teal":634,"source":"contracts/TownHall.algo.ts:229","pc":[808,809,810]},{"teal":640,"source":"contracts/TownHall.algo.ts:231","pc":[811,812]},{"teal":641,"source":"contracts/TownHall.algo.ts:231","pc":[813]},{"teal":642,"source":"contracts/TownHall.algo.ts:231","pc":[814,815]},{"teal":643,"source":"contracts/TownHall.algo.ts:231","pc":[816]},{"teal":644,"source":"contracts/TownHall.algo.ts:231","pc":[817,818,819]},{"teal":649,"source":"contracts/TownHall.algo.ts:232","pc":[820,821]},{"teal":650,"source":"contracts/TownHall.algo.ts:232","pc":[822,823]},{"teal":651,"source":"contracts/TownHall.algo.ts:232","pc":[824]},{"teal":655,"source":"contracts/TownHall.algo.ts:234","pc":[825]},{"teal":656,"source":"contracts/TownHall.algo.ts:234","pc":[826]},{"teal":657,"source":"contracts/TownHall.algo.ts:234","pc":[827]},{"teal":658,"source":"contracts/TownHall.algo.ts:234","pc":[828]},{"teal":659,"source":"contracts/TownHall.algo.ts:234","pc":[829]},{"teal":660,"source":"contracts/TownHall.algo.ts:234","pc":[830,831]},{"teal":661,"source":"contracts/TownHall.algo.ts:234","pc":[832]},{"teal":665,"source":"contracts/TownHall.algo.ts:235","pc":[833]},{"teal":666,"source":"contracts/TownHall.algo.ts:235","pc":[834]},{"teal":667,"source":"contracts/TownHall.algo.ts:235","pc":[835]},{"teal":668,"source":"contracts/TownHall.algo.ts:235","pc":[836]},{"teal":669,"source":"contracts/TownHall.algo.ts:235","pc":[837]},{"teal":670,"source":"contracts/TownHall.algo.ts:235","pc":[838]},{"teal":671,"source":"contracts/TownHall.algo.ts:235","pc":[839]},{"teal":675,"source":"contracts/TownHall.algo.ts:236","pc":[840]},{"teal":676,"source":"contracts/TownHall.algo.ts:236","pc":[841,842,843]},{"teal":682,"source":"contracts/TownHall.algo.ts:238","pc":[844,845]},{"teal":683,"source":"contracts/TownHall.algo.ts:238","pc":[846]},{"teal":684,"source":"contracts/TownHall.algo.ts:238","pc":[847,848]},{"teal":685,"source":"contracts/TownHall.algo.ts:238","pc":[849]},{"teal":686,"source":"contracts/TownHall.algo.ts:238","pc":[850,851,852]},{"teal":691,"source":"contracts/TownHall.algo.ts:239","pc":[853,854]},{"teal":692,"source":"contracts/TownHall.algo.ts:239","pc":[855,856]},{"teal":693,"source":"contracts/TownHall.algo.ts:239","pc":[857]},{"teal":697,"source":"contracts/TownHall.algo.ts:241","pc":[858]},{"teal":698,"source":"contracts/TownHall.algo.ts:241","pc":[859]},{"teal":699,"source":"contracts/TownHall.algo.ts:241","pc":[860]},{"teal":700,"source":"contracts/TownHall.algo.ts:241","pc":[861]},{"teal":701,"source":"contracts/TownHall.algo.ts:241","pc":[862]},{"teal":702,"source":"contracts/TownHall.algo.ts:241","pc":[863,864]},{"teal":703,"source":"contracts/TownHall.algo.ts:241","pc":[865]},{"teal":707,"source":"contracts/TownHall.algo.ts:242","pc":[866]},{"teal":708,"source":"contracts/TownHall.algo.ts:242","pc":[867]},{"teal":709,"source":"contracts/TownHall.algo.ts:242","pc":[868]},{"teal":710,"source":"contracts/TownHall.algo.ts:242","pc":[869]},{"teal":711,"source":"contracts/TownHall.algo.ts:242","pc":[870]},{"teal":712,"source":"contracts/TownHall.algo.ts:242","pc":[871]},{"teal":713,"source":"contracts/TownHall.algo.ts:242","pc":[872]},{"teal":717,"source":"contracts/TownHall.algo.ts:243","pc":[873,874]},{"teal":718,"source":"contracts/TownHall.algo.ts:243","pc":[875]},{"teal":719,"source":"contracts/TownHall.algo.ts:243","pc":[876]},{"teal":723,"source":"contracts/TownHall.algo.ts:244","pc":[877]},{"teal":724,"source":"contracts/TownHall.algo.ts:244","pc":[878,879,880]},{"teal":729,"source":"contracts/TownHall.algo.ts:247","pc":[881]},{"teal":733,"source":"contracts/TownHall.algo.ts:171","pc":[882,883]},{"teal":736,"source":"contracts/TownHall.algo.ts:171","pc":[884,885]},{"teal":737,"source":"contracts/TownHall.algo.ts:171","pc":[886]},{"teal":740,"source":"contracts/TownHall.algo.ts:17","pc":[887,888,889,890,891,892]},{"teal":741,"source":"contracts/TownHall.algo.ts:17","pc":[893,894,895]},{"teal":742,"source":"contracts/TownHall.algo.ts:17","pc":[896,897,898,899]},{"teal":745,"source":"contracts/TownHall.algo.ts:17","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[900]},{"teal":748,"source":"contracts/TownHall.algo.ts:17","pc":[901,902,903,904,905,906]},{"teal":749,"source":"contracts/TownHall.algo.ts:17","pc":[907,908,909,910,911,912]},{"teal":750,"source":"contracts/TownHall.algo.ts:17","pc":[913,914,915,916,917,918]},{"teal":751,"source":"contracts/TownHall.algo.ts:17","pc":[919,920,921,922,923,924]},{"teal":752,"source":"contracts/TownHall.algo.ts:17","pc":[925,926,927,928,929,930]},{"teal":753,"source":"contracts/TownHall.algo.ts:17","pc":[931,932,933]},{"teal":754,"source":"contracts/TownHall.algo.ts:17","pc":[934,935,936,937,938,939,940,941,942,943,944,945]},{"teal":757,"source":"contracts/TownHall.algo.ts:17","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[946]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQBgBiYMDXBsYXllcnNKb2luZWQIAAAAAAAAAAAABBUffHUJZ2FtZVN0YXRlD3BsYXllcjFBbGdvQWRkcg9wbGF5ZXIyQWxnb0FkZHIPcGxheWVyM0FsZ29BZGRyD3BsYXllcjRBbGdvQWRkcg9wbGF5ZXI1QWxnb0FkZHIPcGxheWVyNkFsZ29BZGRyAQAxGBQlCzEZCI0MAtEAAAAAAAAAAAAAAsMAAAAAAAAAAAAAAIgAAiJDigAAJwUyA2cnBjIDZycHMgNnJwgyA2cnCTIDZycKMgNngAZtYWZmaWEyA2eABmRvY3RvcjIDZ4AGZmFybWVyMgNngAdidXRjaGVyMgNngAdpbm5rZWVwMgNngAZncm9jZXIyA2coI2cnBCNniSs2GgEXiAAFFlCwIkOKAQGL/4krNhoEVwIANhoDVwIANhoCVwIANhoBVwIAiAAKJwsjTwJUULAiQ4oEASpJi/+L/ov9UFACjACLAIAgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAGqjAGL/Yv/i/zhAov+iwHhAuACEowARgGJKzYaAVcCAIgADEkVFlcGAkxQULAiQ4oBASpHAov/AowAiwCAMBoBEeo5f+aaSxuntkNLrNdkd0uE84USv2cw0qD2sPYkHqv//rFT//+5/v////+qq6qMAYsB5QKMAosCjABGAokriAAFFlCwIkOKAAEnBGSJKzYaAVcCAIgACicLI08CVFCwIkOKAQEqRwMnBGQjE0EABCNCASooZCUSQQAEI0IBH4v/VwBgjACL/1dgYIwBi/9XwGCMAov/gaACgSBYjAOLA4sCiwGLAIj+4xRBAAQjQgDtKb1MSBRBAAcpJLlIQgAHKUm9RCQI0ym9TEgUQQAEI0IAyycFZDIDEkEAGCcFMQBnKShkJAuLAbsoZCIIKExnIkIAqicGZDIDEkEAGCcGMQBnKShkJAuLAbsoZCIIKExnIkIAiScHZDIDEkEAGCcHMQBnKShkJAuLAbsoZCIIKExnIkIAaCcIZDIDEkEAGCcIMQBnKShkJAuLAbsoZCIIKExnIkIARycJZDIDEkEAGCcJMQBnKShkJAuLAbsoZCIIKExnIkIAJicKZDIDEkEAHCcKMQBnKShkJAuLAbsoZCIIKExnJwQiZyJCAAEjjABGA4mABLhEezY2GgCOAf0xAIAEcM7qG4AEoBe9jIAE13LNvIAE9UC6LIAEOqIM6jYaAI4F/XX9iP37/mD+cAA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TownHall contract
 */
export type TownHallArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'dummyOpUp(uint64)uint64': {
      i: bigint | number
    }
    'dlog(byte[],byte[],byte[],byte[])bool': {
      g: Uint8Array
      x: Uint8Array
      v: Uint8Array
      z: Uint8Array
    }
    'hashPointToPoint(byte[])byte[]': {
      point: Uint8Array
    }
    'getGameState()uint64': Record<string, never>
    'joinGameLobby(byte[])bool': {
      nizkDlog: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'dummyOpUp(uint64)uint64': [i: bigint | number]
    'dlog(byte[],byte[],byte[],byte[])bool': [g: Uint8Array, x: Uint8Array, v: Uint8Array, z: Uint8Array]
    'hashPointToPoint(byte[])byte[]': [point: Uint8Array]
    'getGameState()uint64': []
    'joinGameLobby(byte[])bool': [nizkDlog: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type TownHallReturns = {
  'createApplication()void': void
  'dummyOpUp(uint64)uint64': bigint
  'dlog(byte[],byte[],byte[],byte[])bool': boolean
  'hashPointToPoint(byte[])byte[]': Uint8Array
  'getGameState()uint64': bigint
  'joinGameLobby(byte[])bool': boolean
}

/**
 * Defines the types of available calls and state of the TownHall smart contract.
 */
export type TownHallTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: TownHallArgs['obj']['createApplication()void']
      argsTuple: TownHallArgs['tuple']['createApplication()void']
      returns: TownHallReturns['createApplication()void']
    }>
    & Record<'dummyOpUp(uint64)uint64' | 'dummyOpUp', {
      argsObj: TownHallArgs['obj']['dummyOpUp(uint64)uint64']
      argsTuple: TownHallArgs['tuple']['dummyOpUp(uint64)uint64']
      /**
       * the number (but we do nothing with it)
       */
      returns: TownHallReturns['dummyOpUp(uint64)uint64']
    }>
    & Record<'dlog(byte[],byte[],byte[],byte[])bool' | 'dlog', {
      argsObj: TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool']
      argsTuple: TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']
      returns: TownHallReturns['dlog(byte[],byte[],byte[],byte[])bool']
    }>
    & Record<'hashPointToPoint(byte[])byte[]' | 'hashPointToPoint', {
      argsObj: TownHallArgs['obj']['hashPointToPoint(byte[])byte[]']
      argsTuple: TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']
      returns: TownHallReturns['hashPointToPoint(byte[])byte[]']
    }>
    & Record<'getGameState()uint64' | 'getGameState', {
      argsObj: TownHallArgs['obj']['getGameState()uint64']
      argsTuple: TownHallArgs['tuple']['getGameState()uint64']
      returns: TownHallReturns['getGameState()uint64']
    }>
    & Record<'joinGameLobby(byte[])bool' | 'joinGameLobby', {
      argsObj: TownHallArgs['obj']['joinGameLobby(byte[])bool']
      argsTuple: TownHallArgs['tuple']['joinGameLobby(byte[])bool']
      returns: TownHallReturns['joinGameLobby(byte[])bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        player1AlgoAddr: string
        player2AlgoAddr: string
        player3AlgoAddr: string
        player4AlgoAddr: string
        player5AlgoAddr: string
        player6AlgoAddr: string
        maffia: string
        doctor: string
        farmer: string
        butcher: string
        innkeep: string
        grocer: string
        justKilledPlayer: string
        justKilledTimeOfDeath: bigint
        maffiaCommitment: BinaryState
        doctorCommitment: BinaryState
        maffiaVictim: BinaryState
        doctorPatient: BinaryState
        playersJoined: bigint
        gameState: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        quickAccessPkBoxes: Map<bigint | number, Uint8Array>
        hashFilter: Map<Uint8Array | string, Uint8Array>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TownHallSignatures = keyof TownHallTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TownHallNonVoidMethodSignatures = keyof TownHallTypes['methods'] extends infer T ? T extends keyof TownHallTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TownHall smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TownHallSignatures> = TownHallTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TownHall smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TownHallSignatures> = TownHallTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TownHallTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TownHallTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TownHallCreateCallParams =
  | Expand<CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TownHallDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TownHallCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TownHall smart contract
 */
export abstract class TownHallParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TownHallCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return TownHallParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TownHall smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the dummyOpUp(uint64)uint64 ABI method
   *
  * Dummy Op Up
  Dummy operation to get more opcode budget
  - The number to return, necssary to deduplicate the name

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dummyOpUp(params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dummyOpUp(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.i],
    }
  }
  /**
   * Constructs a no op call for the dlog(byte[],byte[],byte[],byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dlog(params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dlog(byte[],byte[],byte[],byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.g, params.args.x, params.args.v, params.args.z],
    }
  }
  /**
   * Constructs a no op call for the hashPointToPoint(byte[])byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hashPointToPoint(params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hashPointToPoint(byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.point],
    }
  }
  /**
   * Constructs a no op call for the getGameState()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameState(params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameState()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the joinGameLobby(byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGameLobby(params: CallParams<TownHallArgs['obj']['joinGameLobby(byte[])bool'] | TownHallArgs['tuple']['joinGameLobby(byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'joinGameLobby(byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nizkDlog],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TownHall smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TownHallFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TownHallFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TownHallClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TownHallClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TownHall smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TownHallDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TownHallParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TownHallCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TownHallClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TownHall smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(TownHallParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TownHall smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(TownHallParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TownHall smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(TownHallParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TownHallReturns['createApplication()void']) }, appClient: new TownHallClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TownHall smart contract
 */
export class TownHallClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TownHallClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TownHall app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TownHallClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TownHallNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TownHallClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TownHallClient> {
    return new TownHallClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TownHallClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TownHallClient> {
    return new TownHallClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TownHall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TownHall smart contract using the `dummyOpUp(uint64)uint64` ABI method.
     *
    * Dummy Op Up
    Dummy operation to get more opcode budget
    - The number to return, necssary to deduplicate the name

     *
     * @param params The params for the smart contract call
     * @returns The call params: the number (but we do nothing with it)
     */
    dummyOpUp: (params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dummyOpUp(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dlog(byte[],byte[],byte[],byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dlog: (params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dlog(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `hashPointToPoint(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hashPointToPoint: (params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.hashPointToPoint(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `getGameState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameState: (params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TownHallParamsFactory.getGameState(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `joinGameLobby(byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGameLobby: (params: CallParams<TownHallArgs['obj']['joinGameLobby(byte[])bool'] | TownHallArgs['tuple']['joinGameLobby(byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.joinGameLobby(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TownHall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TownHall smart contract using the `dummyOpUp(uint64)uint64` ABI method.
     *
    * Dummy Op Up
    Dummy operation to get more opcode budget
    - The number to return, necssary to deduplicate the name

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: the number (but we do nothing with it)
     */
    dummyOpUp: (params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dummyOpUp(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dlog(byte[],byte[],byte[],byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dlog: (params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dlog(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `hashPointToPoint(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hashPointToPoint: (params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.hashPointToPoint(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `getGameState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameState: (params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.getGameState(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `joinGameLobby(byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGameLobby: (params: CallParams<TownHallArgs['obj']['joinGameLobby(byte[])bool'] | TownHallArgs['tuple']['joinGameLobby(byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.joinGameLobby(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TownHall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TownHall smart contract using the `dummyOpUp(uint64)uint64` ABI method.
     *
    * Dummy Op Up
    Dummy operation to get more opcode budget
    - The number to return, necssary to deduplicate the name

     *
     * @param params The params for the smart contract call
     * @returns The call result: the number (but we do nothing with it)
     */
    dummyOpUp: async (params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dummyOpUp(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dummyOpUp(uint64)uint64'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dlog(byte[],byte[],byte[],byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dlog: async (params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dlog(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dlog(byte[],byte[],byte[],byte[])bool'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `hashPointToPoint(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hashPointToPoint: async (params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.hashPointToPoint(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['hashPointToPoint(byte[])byte[]'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `getGameState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameState: async (params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.getGameState(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['getGameState()uint64'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `joinGameLobby(byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGameLobby: async (params: CallParams<TownHallArgs['obj']['joinGameLobby(byte[])bool'] | TownHallArgs['tuple']['joinGameLobby(byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.joinGameLobby(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['joinGameLobby(byte[])bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TownHallClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TownHall app
   */
  state = {
    /**
     * Methods to access global state for the current TownHall app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          player1AlgoAddr: result.player1AlgoAddr,
          player2AlgoAddr: result.player2AlgoAddr,
          player3AlgoAddr: result.player3AlgoAddr,
          player4AlgoAddr: result.player4AlgoAddr,
          player5AlgoAddr: result.player5AlgoAddr,
          player6AlgoAddr: result.player6AlgoAddr,
          maffia: result.maffia,
          doctor: result.doctor,
          farmer: result.farmer,
          butcher: result.butcher,
          innkeep: result.innkeep,
          grocer: result.grocer,
          justKilledPlayer: result.justKilledPlayer,
          justKilledTimeOfDeath: result.justKilledTimeOfDeath,
          maffiaCommitment: new BinaryStateValue(result.maffiaCommitment),
          doctorCommitment: new BinaryStateValue(result.doctorCommitment),
          maffiaVictim: new BinaryStateValue(result.maffiaVictim),
          doctorPatient: new BinaryStateValue(result.doctorPatient),
          playersJoined: result.playersJoined,
          gameState: result.gameState,
        }
      },
      /**
       * Get the current value of the player1AlgoAddr key in global state
       */
      player1AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player1AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player2AlgoAddr key in global state
       */
      player2AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player2AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player3AlgoAddr key in global state
       */
      player3AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player3AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player4AlgoAddr key in global state
       */
      player4AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player4AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player5AlgoAddr key in global state
       */
      player5AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player5AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player6AlgoAddr key in global state
       */
      player6AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player6AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the maffia key in global state
       */
      maffia: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maffia")) as string | undefined },
      /**
       * Get the current value of the doctor key in global state
       */
      doctor: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("doctor")) as string | undefined },
      /**
       * Get the current value of the farmer key in global state
       */
      farmer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("farmer")) as string | undefined },
      /**
       * Get the current value of the butcher key in global state
       */
      butcher: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("butcher")) as string | undefined },
      /**
       * Get the current value of the innkeep key in global state
       */
      innkeep: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("innkeep")) as string | undefined },
      /**
       * Get the current value of the grocer key in global state
       */
      grocer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("grocer")) as string | undefined },
      /**
       * Get the current value of the justKilledPlayer key in global state
       */
      justKilledPlayer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("justKilledPlayer")) as string | undefined },
      /**
       * Get the current value of the justKilledTimeOfDeath key in global state
       */
      justKilledTimeOfDeath: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("justKilledTimeOfDeath")) as bigint | undefined },
      /**
       * Get the current value of the maffiaCommitment key in global state
       */
      maffiaCommitment: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("maffiaCommitment")) as Uint8Array | undefined) },
      /**
       * Get the current value of the doctorCommitment key in global state
       */
      doctorCommitment: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("doctorCommitment")) as Uint8Array | undefined) },
      /**
       * Get the current value of the maffiaVictim key in global state
       */
      maffiaVictim: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("maffiaVictim")) as Uint8Array | undefined) },
      /**
       * Get the current value of the doctorPatient key in global state
       */
      doctorPatient: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("doctorPatient")) as Uint8Array | undefined) },
      /**
       * Get the current value of the playersJoined key in global state
       */
      playersJoined: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("playersJoined")) as bigint | undefined },
      /**
       * Get the current value of the gameState key in global state
       */
      gameState: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameState")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current TownHall app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the quickAccessPKBoxes map in box state
       */
      quickAccessPkBoxes: {
        /**
         * Get all current values of the quickAccessPKBoxes map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("quickAccessPKBoxes")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the quickAccessPKBoxes map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("quickAccessPKBoxes", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the hashFilter map in box state
       */
      hashFilter: {
        /**
         * Get all current values of the hashFilter map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Uint8Array>> => { return (await this.appClient.state.box.getMap("hashFilter")) as Map<Uint8Array, Uint8Array> },
        /**
         * Get a current value of the hashFilter map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("hashFilter", key) as Uint8Array | undefined },
      },
    },
  }

  public newGroup(): TownHallComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a dummyOpUp(uint64)uint64 method call against the TownHall contract
       */
      dummyOpUp(params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dummyOpUp(params)))
        resultMappers.push((v) => client.decodeReturnValue('dummyOpUp(uint64)uint64', v))
        return this
      },
      /**
       * Add a dlog(byte[],byte[],byte[],byte[])bool method call against the TownHall contract
       */
      dlog(params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dlog(params)))
        resultMappers.push((v) => client.decodeReturnValue('dlog(byte[],byte[],byte[],byte[])bool', v))
        return this
      },
      /**
       * Add a hashPointToPoint(byte[])byte[] method call against the TownHall contract
       */
      hashPointToPoint(params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hashPointToPoint(params)))
        resultMappers.push((v) => client.decodeReturnValue('hashPointToPoint(byte[])byte[]', v))
        return this
      },
      /**
       * Add a getGameState()uint64 method call against the TownHall contract
       */
      getGameState(params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameState(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameState()uint64', v))
        return this
      },
      /**
       * Add a joinGameLobby(byte[])bool method call against the TownHall contract
       */
      joinGameLobby(params: CallParams<TownHallArgs['obj']['joinGameLobby(byte[])bool'] | TownHallArgs['tuple']['joinGameLobby(byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGameLobby(params)))
        resultMappers.push((v) => client.decodeReturnValue('joinGameLobby(byte[])bool', v))
        return this
      },
      /**
       * Add a clear state call to the TownHall contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TownHallComposer
  }
}
export type TownHallComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the dummyOpUp(uint64)uint64 ABI method.
   *
  * Dummy Op Up
  Dummy operation to get more opcode budget
  - The number to return, necssary to deduplicate the name

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dummyOpUp(params?: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']>): TownHallComposer<[...TReturns, TownHallReturns['dummyOpUp(uint64)uint64'] | undefined]>

  /**
   * Calls the dlog(byte[],byte[],byte[],byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dlog(params?: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']>): TownHallComposer<[...TReturns, TownHallReturns['dlog(byte[],byte[],byte[],byte[])bool'] | undefined]>

  /**
   * Calls the hashPointToPoint(byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hashPointToPoint(params?: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']>): TownHallComposer<[...TReturns, TownHallReturns['hashPointToPoint(byte[])byte[]'] | undefined]>

  /**
   * Calls the getGameState()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameState(params?: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']>): TownHallComposer<[...TReturns, TownHallReturns['getGameState()uint64'] | undefined]>

  /**
   * Calls the joinGameLobby(byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGameLobby(params?: CallParams<TownHallArgs['obj']['joinGameLobby(byte[])bool'] | TownHallArgs['tuple']['joinGameLobby(byte[])bool']>): TownHallComposer<[...TReturns, TownHallReturns['joinGameLobby(byte[])bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TownHall smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TownHallComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TownHallComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TownHallComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TownHallComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TownHallComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TownHallComposerResults<TReturns>>
}
export type TownHallComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

